const isValidSudoku = require('./index');

describe('isValidSudoku', () => {
    test('should return true for a valid Sudoku board', () => {
        const board = [
            ["5","3",".",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ];
        expect(isValidSudoku(board)).toBe(true);
    });

    test('should return false for an invalid Sudoku board with duplicate in row', () => {
        const board = [
            ["8","3",".",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ];
        expect(isValidSudoku(board)).toBe(false);
    });

    test('should return false for an empty board', () => {
        const board = [
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."]
        ];
        expect(isValidSudoku(board)).toBe(true); // An empty board is considered valid
    });

    test('should return false for a board with invalid 3x3 sub-box', () => {
        const board = [
            ["5","3","5",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ];
        expect(isValidSudoku(board)).toBe(false);
    });

    test('should return true for a board with valid filled and empty cells', () => {
        const board = [
            [".",".","9","7","4","8",".",".","."],
            ["7","5",".",".",".",".",".","1","."],
            [".","9","8",".",".",".",".","2","."],
            [".",".",".","1","2","3",".",".","6"],
            [".","2","1","5","3","4","7",".","."],
            ["4","3",".","8",".","7",".",".","."],
            [".","6","1",".",".",".","2","8","."],
            [".","4","5",".",".",".",".","3","7"],
            [".",".","2","4","7","5","9",".","."]
        ];
        expect(isValidSudoku(board)).toBe(false);
    });
});
